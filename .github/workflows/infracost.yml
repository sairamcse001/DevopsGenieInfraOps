name: Infracost PR Analysis

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  infracost:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || github.event.issue.pull_request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ics_v1_0EYAc3KF1KDTdwcVGiFemY_NTLN0pGEqFspCecg7pUoHjraFjhLRwtik5Lkfj6dOtnBHH45T

      - name: Run Infracost and generate JSON
        run: |
          infracost breakdown \
            --path=terraform \
            --format=json \
            --out-file=infracost-output.json

      - name: Print GitHub PR and Infracost Output
        run: |
          pr_number="${{ github.event.pull_request.number }}"
          repo="${{ github.repository }}"

          echo "üì¶ Repository: $repo"
          echo "üî¢ PR Number: $pr_number"
          echo "üí∏ Infracost Output:"
          cat infracost-output.json

      - name: Get Infracost Bot Comment and Save HTML
        id: fetch_comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pr_number="${{ github.event.pull_request.number }}"
          else
            pr_url="${{ github.event.issue.pull_request.url }}"
            pr_number=$(echo $pr_url | grep -o '[0-9]*$')
          fi

          echo "üì• Fetching comments for PR #$pr_number"
          comments=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/comments")

          echo "$comments"
          infracost_comment=$(echo "$comments" | jq -r '.[0].body')
          
          echo "$infracost_comment"
          if [ -z "$infracost_comment" ]; then
            echo "No Infracost bot comment found."
            exit 1
          fi

          echo "$infracost_comment" > comment.html
          echo "------ BEGIN Infracost comment HTML ------"
          echo "$infracost_comment"
          echo "------- END Infracost comment HTML -------"

          echo "comment_file=comment.html" >> $GITHUB_OUTPUT

      - name: Parse Infracost Comment HTML to JSON and extract FinOps policies
        run: |
          npm install cheerio

          node -e "
            const fs = require('fs');
            const cheerio = require('cheerio');
            let html = fs.readFileSync('comment.html', 'utf8');

            // Remove markdown comment line at the start if present
            const markdownCommentRegex = /^\[\/\/\]: <> \(.*?\)\n?/;
            const cleanedHtml = html.replace(markdownCommentRegex, '');

            const \$ = cheerio.load(cleanedHtml, { decodeEntities: false });

            function parseNode(node) {
              if (node.type === 'text') {
                const text = node.data.trim();
                if (text) return text;
                return null;
              }
              if (node.type === 'tag') {
                const obj = { tag: node.name, attrs: node.attribs || {} };
                const children = [];
                node.children.forEach(c => {
                  const child = parseNode(c);
                  if (child !== null && child !== '') children.push(child);
                });
                if (children.length) obj.children = children;
                return obj;
              }
              return null;
            }

            const rootNode = \$('body').get(0) || \$.root().get(0);
            const json = parseNode(rootNode);

            fs.writeFileSync('comment.json', JSON.stringify(json, null, 2));
            console.log('Parsed Infracost comment to comment.json');

            // Function to find first table with "FinOps policies"
            function findTables(node) {
              let tables = [];
              if (!node) return tables;
              if (node.tag === 'table') tables.push(node);
              if (node.children) {
                node.children.forEach(c => {
                  tables = tables.concat(findTables(c));
                });
              }
              return tables;
            }

            function tableHasFinOpsTitle(tableNode) {
              if (!tableNode.children) return false;
              for (const tr of tableNode.children) {
                if (tr.tag === 'tr' && tr.children) {
                  for (const td of tr.children) {
                    if (td.tag === 'td' && td.children) {
                      for (const child of td.children) {
                        if (typeof child === 'string' && child.includes('FinOps policies')) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
              return false;
            }

            const tables = findTables(json);
            const finOpsTable = tables.find(tableHasFinOpsTitle);

            if (!finOpsTable) {
              console.log('No FinOps policies table found');
              process.exit(1);
            }

            // Extract policies: summary + description text inside <details>
            const trs = finOpsTable.children.filter(c => c.tag === 'tr');
            let policies = [];

            for (let i = 0; i < trs.length; i++) {
              const tr = trs[i];
              if (!tr.children) continue;
              const tdWithDetails = tr.children.find(td => td.tag === 'td' && td.children && td.children.some(c => typeof c === 'object' && c.tag === 'details'));
              if (tdWithDetails) {
                const detailsNode = tdWithDetails.children.find(c => typeof c === 'object' && c.tag === 'details');
                if (detailsNode && detailsNode.children) {
                  // summary text from <summary><b>...</b></summary>
                  const summaryNode = detailsNode.children.find(c => c.tag === 'summary');
                  let summaryText = '';
                  if (summaryNode && summaryNode.children) {
                    summaryText = summaryNode.children.map(ch => {
                      if (typeof ch === 'string') return ch.trim();
                      if (ch.tag === 'b' && ch.children) return ch.children.join('').trim();
                      return '';
                    }).join(' ').trim();
                  }

                  // description text after <br/>
                  let descText = '';
                  const brIndex = detailsNode.children.findIndex(c => c.tag === 'br');
                  if (brIndex !== -1) {
                    for (let j = brIndex + 1; j < detailsNode.children.length; j++) {
                      const c = detailsNode.children[j];
                      if (typeof c === 'string') descText += c.trim() + ' ';
                      else if (c.children) {
                        descText += c.children.filter(x => typeof x === 'string').join(' ') + ' ';
                      }
                    }
                  }

                  policies.push({summary: summaryText, description: descText.trim()});
                }
              }
            }

            // Print policies in desired format
            policies.forEach(p => {
              console.log(`‚Äú${p.summary}‚Äù : ${p.description}\n`);
            });
          "
