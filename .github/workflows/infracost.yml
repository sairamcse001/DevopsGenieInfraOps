name: Infracost PR Analysis

on:
  issue_comment:
    types: [created]
  pull_request:
    paths:
      - 'terraform/**'
  workflow_dispatch:

jobs:
  infracost:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || github.event.issue.pull_request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ics_v1_0EYAc3KF1KDTdwcVGiFemY_NTLN0pGEqFspCecg7pUoHjraFjhLRwtik5Lkfj6dOtnBHH45T

      - name: Run Infracost and generate JSON
        run: |
          infracost breakdown \
            --path=terraform \
            --format=json \
            --out-file=infracost-output.json

      - name: Print GitHub PR and Infracost Output
        run: |
          pr_number="${{ github.event.pull_request.number }}"
          repo="${{ github.repository }}"

          echo "ðŸ“¦ Repository: $repo"
          echo "ðŸ”¢ PR Number: $pr_number"
          echo "ðŸ’¸ Infracost Output:"
          cat infracost-output.json

      - name: Get Infracost Bot Comment and Save HTML
        id: fetch_comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pr_number="${{ github.event.pull_request.number }}"
          else
            pr_url="${{ github.event.issue.pull_request.url }}"
            pr_number=$(echo $pr_url | grep -o '[0-9]*$')
          fi

          echo "ðŸ“¥ Fetching comments for PR #$pr_number"
          comments=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/comments")

          infracost_comment=$(echo "$comments" | jq -r '.[0].body')

          if [ -z "$infracost_comment" ]; then
            echo "No Infracost bot comment found."
            exit 1
          fi

          echo "$infracost_comment" > comment.html
          echo "------ BEGIN Infracost comment HTML ------"
          echo "$infracost_comment"
          echo "------- END Infracost comment HTML -------"

          echo "comment_file=comment.html" >> $GITHUB_OUTPUT

      - name: Parse Infracost Comment HTML to JSON and print raw HTML
        run: |
          npm install cheerio

          node -e "
            const fs = require('fs');
            const cheerio = require('cheerio');

            let html = fs.readFileSync('comment.html', 'utf8');

            // Remove markdown comment line at the start if present
            const markdownCommentRegex = /^\[\/\/\]: <> \(.*?\)\n?/;
            const cleanedHtml = html.replace(markdownCommentRegex, '');

            console.log('ðŸ“„ Raw cleaned HTML content:');
            console.log(cleanedHtml);

            const \$ = cheerio.load(cleanedHtml, { decodeEntities: false });

            function getTextFromNode(node) {
              if (node.type === 'text') return node.data.trim();
              if (!node.children) return '';
              return node.children.map(getTextFromNode).join(' ').trim();
            }

            function parseNode(node) {
              if (node.type === 'text') {
                const text = node.data.trim();
                if (text) return text;
                return null;
              }
              if (node.type === 'tag') {
                // Check if this node is a <table>
                if (node.name === 'table') {
                  // Find first <tr><td> text inside this table
                  const firstTr = node.children.find(n => n.type === 'tag' && n.name === 'tr');
                  if (firstTr) {
                    const firstTd = firstTr.children.find(n => n.type === 'tag' && n.name === 'td');
                    if (firstTd) {
                      // Extract the text inside that td
                      let tdText = '';
                      firstTd.children.forEach(child => {
                        if (child.type === 'text') tdText += child.data;
                        else if (child.type === 'tag' && child.children) {
                          child.children.forEach(grandchild => {
                            if (grandchild.type === 'text') tdText += grandchild.data;
                          });
                        }
                      });
                      tdText = tdText.trim();
            
                      // Check for FinOps policies text
                      if (tdText.includes('FinOps policies')) {
                        // This is the table we want â€” parse fully and return
                        const obj = { tag: node.name, attrs: node.attribs || {} };
                        const children = [];
                        node.children.forEach(c => {
                          const child = parseNode(c);
                          if (child !== null && child !== '') children.push(child);
                        });
                        if (children.length) obj.children = children;
                        return obj;
                      } else {
                        // This is a different table, skip it
                        return null;
                      }
                    }
                  }
                  // No tr/td found, skip this table
                  return null;
                }
            
                // For other tags (non-table), parse normally
                const obj = { tag: node.name, attrs: node.attribs || {} };
                const children = [];
                node.children.forEach(c => {
                  const child = parseNode(c);
                  if (child !== null && child !== '') children.push(child);
                });
                if (children.length) obj.children = children;
                return obj;
              }
              return null;
            }


            const rootNode = \$('body').get(0) || \$.root().get(0);
            const json = parseNode(rootNode);

            fs.writeFileSync('comment.json', JSON.stringify(json, null, 2));
            console.log('Parsed Infracost comment to comment.json');
            console.log(JSON.stringify(json, null, 2));
          "
